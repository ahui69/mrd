#!/bin/bash
# SETUP NA SERWERZE PRODUKCYJNYM

echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë  üöÄ SETUP MORDZIX AI - PRODUCTION SERVER                   ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo ""

# Wybierz katalog (domy≈õlnie /var/www/mordzix)
APP_DIR="${1:-/var/www/mordzix}"

echo "üìÅ Katalog aplikacji: $APP_DIR"
echo ""

# 1. Utw√≥rz strukturƒô katalog√≥w
echo "1Ô∏è‚É£  Tworzƒô katalogi..."
mkdir -p "$APP_DIR"/{data,out/images,out/writing,out/dev,queue,prompts,data/uploads,data/mem}
echo "   ‚úÖ Utworzono strukturƒô katalog√≥w"

# 2. Skopiuj pliki (zak≈Çadam ≈ºe sƒÖ w bie≈ºƒÖcym katalogu)
echo ""
echo "2Ô∏è‚É£  Kopiujƒô pliki aplikacji..."
cp *.py "$APP_DIR/" 2>/dev/null
cp *.html "$APP_DIR/" 2>/dev/null
cp .env.production "$APP_DIR/.env" 2>/dev/null || cp .env "$APP_DIR/.env"
cp start.sh "$APP_DIR/"
cp requirements.txt "$APP_DIR/"
echo "   ‚úÖ Skopiowano pliki"

# 3. Zaktualizuj ≈õcie≈ºki w .env
echo ""
echo "3Ô∏è‚É£  Aktualizujƒô ≈õcie≈ºki w .env..."
cd "$APP_DIR"
sed -i "s|/var/www/mordzix|$APP_DIR|g" .env
sed -i "s|C:/Users/48501/Desktop/mrd69|$APP_DIR|g" .env
echo "   ‚úÖ Zaktualizowano ≈õcie≈ºki"

# 4. Instaluj dependencies
echo ""
echo "4Ô∏è‚É£  Instalujƒô zale≈ºno≈õci Python..."
pip3 install -r requirements.txt
echo "   ‚úÖ Zainstalowano dependencies"

# 5. Wgraj fakty (je≈õli sƒÖ)
if [ -f "facts_complete.json" ]; then
    echo ""
    echo "5Ô∏è‚É£  Wgrywam 5200+ fakt√≥w do bazy..."
    python3 << 'PYEOF'
import sqlite3, json, hashlib, time
try:
    with open('facts_complete.json') as f:
        facts = json.load(f)
    conn = sqlite3.connect('data/monolit.db')
    cur = conn.cursor()
    cur.execute('''CREATE TABLE IF NOT EXISTS ltm 
                   (id TEXT PRIMARY KEY, text TEXT, tags TEXT, 
                    source TEXT, conf REAL, created_at INTEGER)''')
    for fact in facts:
        fact_id = hashlib.sha256(fact['text'].encode()).hexdigest()[:16]
        tags_str = ','.join(fact['tags']) if isinstance(fact['tags'], list) else fact['tags']
        cur.execute('INSERT OR IGNORE INTO ltm VALUES (?,?,?,?,?,?)', 
                   (fact_id, fact['text'], tags_str, 
                    fact.get('source','batch'), fact.get('conf',0.75), 
                    int(time.time())))
    conn.commit()
    print(f'   ‚úÖ Wgrano {len(facts)} fakt√≥w do bazy')
except Exception as e:
    print(f'   ‚ö†Ô∏è  B≈ÇƒÖd wgrywania fakt√≥w: {e}')
PYEOF
else
    echo "   ‚ö†Ô∏è  Brak facts_complete.json - pominiƒôto"
fi

# 6. Uprawnienia
echo ""
echo "6Ô∏è‚É£  Ustawiam uprawnienia..."
chmod +x start.sh
chmod 755 "$APP_DIR"
chmod -R 755 "$APP_DIR/data"
chmod -R 755 "$APP_DIR/out"
chmod -R 755 "$APP_DIR/queue"
echo "   ‚úÖ Uprawnienia ustawione"

# 7. Informacje
echo ""
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "‚úÖ SETUP ZAKO≈ÉCZONY!"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""
echo "üöÄ URUCHOMIENIE:"
echo "   cd $APP_DIR"
echo "   bash start.sh"
echo ""
echo "üåê ADRES:"
echo "   http://$(hostname -I | awk '{print $1}'):8080/"
echo ""
echo "üìä SPRAWD≈π STATUS:"
echo "   curl http://localhost:8080/api/health"
echo ""
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

